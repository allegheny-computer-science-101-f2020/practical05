---
name: cs101f2020-practical05
break: true
indent: 4
---

# Learn more about GatorGrader and its supported checks by visiting this web site:
# https://github.com/GatorEducator/gatorgrader

# Explanation:
# --> a check without an "--exact" runs a count for an entity as an "at least"
# --> checks below a file in a specified directory are for that specific file and directory
# --> checks that appear stand-alone are for an entire Git repository

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/computation/ArithmeticComputation.java:
            ConfirmFileExists
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "public abstract class" --count 1 --exact

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/computation/FactorialComputation.java:
            ConfirmFileExists
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "public abstract class" --count 1 --exact

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/computation/IterativeFactorialComputation.java:
            ConfirmFileExists
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "public class" --count 1 --exact
            MatchFileFragment --fragment "compute(" --count 1 --exact
            MatchFileFragment --fragment "for (" --count 1

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/computation/RecursiveFactorialComputation.java:
            ConfirmFileExists
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "public class" --count 1 --exact
            MatchFileFragment --fragment "compute(" --count 2 --exact
            MatchFileFragment --fragment "for (" --count 0 --exact

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/data/ResultsTable.java:
            ConfirmFileExists
            CountSingleLineComments --language Java --count 2
            CountMultipleLineComments --language Java --count 12
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "double ratio =" --count 1 --exact
            MatchFileFragment --fragment "println" --count 0 --exact

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/experiment/Campaign.java:
            ConfirmFileExists
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "println" --count 0 --exact

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/experiment/Experiment.java:
            ConfirmFileExists
            CountSingleLineComments --language Java --count 2
            CountMultipleLineComments --language Java --count 2
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "println(" --count 7

# --> check the source code for various characteristics
src/main:
    java:
        practicalfive/experiment/RunCampaign.java:
            ConfirmFileExists
            CountSingleLineComments --language Java --count 1
            CountMultipleLineComments --language Java --count 5
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "println(" --count 3

# --> check the source code for various characteristics
src/test:
    java:
        practicalfive/TestResultsTable.java:
            ConfirmFileExists
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact

# --> check the source code for various characteristics
src/test:
    java:
        practicalfive/TestArithmeticComputations.java:
            ConfirmFileExists
            MatchFileFragment --fragment "TODO" --count 0 --exact
            MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact
            MatchFileFragment --fragment "package practicalfive" --count 1 --exact
            MatchFileFragment --fragment "@Test" --count 6 --exact
            MatchFileFragment --fragment "IterativeFactorialComputation" --count 2
            MatchFileFragment --fragment "RecursiveFactorialComputation" --count 2

# --> check that the number of commits in the Git repository is beyond a baseline
CountCommits --count 2

# --> check that the program builds, tests, and executes correctly
ExecuteCommand --command "gradle build"
ExecuteCommand --command "gradle test"

# NOTE: Optionally, run the gradle run command, bearing in mind that it could take a full minute
#
# ExecuteCommand --command "gradle -q --console plain run"

# --> NOTE: Do not run repeated checks on the content of the output since this program runs
# a campaign of experiments and inefficient programs could take too long to repeatedly run
